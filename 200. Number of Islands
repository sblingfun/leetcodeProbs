//DFS SOLUTION
class Solution {
    public int numIslands(char[][] grid) {
        int islands = 0;
        for (int i = 0; i < grid.length; i++) {
            for (int j = 0; j < grid[0].length; j++) {
                // dfs function 
                if (grid[i][j] == '1') {
                    System.out.println("Checking i " + i + " j " + j);
                    System.out.println("Num islands " + islands);
                    islands++;
                    dfs(grid, i, j);
                }
            }
        }
        System.out.println("Num islands " + islands);
        return islands;
    }

    private void dfs(char[][] grid, int r, int c) {
        System.out.println("Internal r " + r + " c " + c);
        if (r < 0 || c < 0 || r >= grid.length || c > grid[0].length - 1) {
            return;
        }
        else if (grid[r][c] == '1') {
            grid[r][c] = '0';
            dfs(grid, r + 1, c);
            dfs(grid, r - 1, c);
            dfs(grid, r, c + 1);
            dfs(grid, r, c - 1);
        }
    }
}

//BFS SOLUTION
class Solution {
    public int numIslands(char[][] grid) {
        int numIslands = 0;
        boolean[][] visited = new boolean[grid.length][grid[0].length];
        //bool initalized to false;
        

        //could use HashSet to keep track of visited nodes
        for(int i = 0; i < grid.length; i++) {
            for(int j = 0; j < grid[0].length; j++) {
                if(grid[i][j]=='1' && visited[i][j]==false) {
                    bfs(grid, visited, i, j);
                    numIslands++;
                }  
            }
        }
        return numIslands;
    }
    //bfs function that updates all connected 1's to 0s when an island is encountered
    private void bfs(char[][] grid, boolean[][] visited, int row, int col) {
        Queue<int[]> toVisit = new LinkedList<int[]>();
        toVisit.add(new int[]{row,col});
        while (!toVisit.isEmpty()) {
            int[] temp = toVisit.remove();
            int r = temp[0];
            int c = temp[1];
            visited[r][c] = true;
            for(int i = 0; i < 4; i++) {
                int tempR = r;
                int tempC = c;
                if(i == 0) tempR -=1;
                if(i == 1) tempR +=1;
                if(i == 2) tempC -=1;
                if(i == 3) tempC +=1;
                if(tempR >= 0 && tempC >= 0 && tempR < grid.length && tempC < grid[0].length && grid[tempR][tempC]=='1' && visited[tempR][tempC] == false) {
                    toVisit.add(new int[]{tempR,tempC});
                }
            }
        }       
    }
}
