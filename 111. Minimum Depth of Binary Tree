//My solution
class Solution {
    public int minDepth(TreeNode root) {
        if (root == null) return 0;
        int count = 1;
        Queue<TreeNode> toVisit = new LinkedList<TreeNode>();
        toVisit.add(root);
        while (!toVisit.isEmpty()) {
            int curRowSize = toVisit.size();
            for (int i = 0; i < curRowSize; i++) {
                TreeNode temp = toVisit.remove();
                //End node is when both right and left nodes of current node are null
                if (temp.left == null && temp.right == null) return count;
                if (temp.left != null) toVisit.add(temp.left);
                if (temp.right != null) toVisit.add(temp.right);
            }
            count++;
        }
        return count;
    }
}

//Given leetcode solution using BFS
public int minDepth(TreeNode root) {
    if(root == null) return 0;
    int depth = 1;
    Queue<TreeNode> q = new LinkedList<TreeNode>();
    q.offer(root);
    while(!q.isEmpty()){
        int size = q.size();
        // for each level
        for(int i=0;i<size;i++){
            TreeNode node = q.poll();
            if(node.left == null && node.right == null){
                return depth;
            }
            if(node.left != null){
                q.offer(node.left);
            }
            if(node.right != null){
                q.offer(node.right);
            }
        }
        depth++;
    }
    return depth;
}
