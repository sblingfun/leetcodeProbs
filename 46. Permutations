class Solution {
    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> retList = new ArrayList<List<Integer>>();
        permuteUtil(retList, new ArrayList<Integer>(), nums);
        return retList;
    }

    //returning void becuase bassing retlist from original function
    private static void permuteUtil (List<List<Integer>> list, ArrayList<Integer> current,int[] nums) {
        if (current.size() == nums.length) {
            list.add(new ArrayList<Integer>(current));
        }
        else {
            for (int i = 0; i < nums.length; i++) {
                //use contains to check if the list already has the current number in it
                //continue skips the rest of the current loop iteration
                if(current.contains(nums[i])) continue;
                //will only trigger if current does not contain nums[i]
                current.add(nums[i]);
                //recursive call with the new list of current
                permuteUtil(list, current, nums);
                //backtrack by removing last number
                current.remove(current.size() - 1);
            }
        }
    }
}
