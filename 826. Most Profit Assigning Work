class Solution {
    public int maxProfitAssignment(int[] difficulty, int[] profit, int[] worker) {
        quickSrt(difficulty, profit, 0, difficulty.length - 1);
        
        /*
        for (int i = 0; i < difficulty.length; i++) {
            System.out.println(difficulty[i]);
        }
        for (int i = 0; i < difficulty.length; i++) {
            System.out.println(profit[i]);
        }
        */

        int totalProf = 0;
        for (int work : worker) {
            //System.out.print(dif);
            int maxProf = 0;
            int diffIdx = 0;
            //could do binary search
            while (diffIdx < difficulty.length) {
                if (work >= difficulty[diffIdx]) {
                    maxProf = Math.max(maxProf, profit[diffIdx]);
                    //System.out.println("adding: " + maxProf);
                }
                diffIdx++;
            }
            totalProf += maxProf;
        }

        return totalProf;
    }


    public void quickSrt(int[] diff, int[] prof, int start, int end) {
        if (start < end) {
            int partVal = partition(diff, prof, start, end);
            quickSrt(diff, prof, start, partVal - 1);
            quickSrt(diff, prof, partVal + 1, end);
        }
    }

    public int partition(int[] diff, int[] prof, int start, int end) {
        int temp = 0;
        int temp2 = 0;
        int prevIdx = start - 1;
        int compVal = diff[end];
        for (int i = start; i < end; i++) {
            if (diff[i] < compVal) {
                prevIdx++;
                temp = diff[prevIdx];
                diff[prevIdx] = diff[i];
                diff[i] = temp;
                temp2 = prof[prevIdx];
                prof[prevIdx] = prof[i];
                prof[i] = temp2;
            }
        }
        temp = diff[end];
        diff[end] = diff[prevIdx + 1];
        diff[prevIdx + 1] = temp;
        temp2 = prof[end];
        prof[end] = prof[prevIdx + 1];
        prof[prevIdx + 1] = temp2;

        return prevIdx + 1;
    }

}
