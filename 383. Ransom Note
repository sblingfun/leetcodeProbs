class Solution {
    public boolean canConstruct(String ransomNote, String magazine) {
        HashMap<Character, Integer> magChars = new HashMap<Character, Integer>();
        for (int i = 0; i < magazine.length(); i++) {
            magChars.put(magazine.charAt(i), magChars.getOrDefault(magazine.charAt(i), 0) + 1);
        }
        for (int i = 0 ; i < ransomNote.length(); i++) {
            if (magChars.containsKey(ransomNote.charAt(i)) && magChars.get(ransomNote.charAt(i)) > 0) {
                magChars.put(ransomNote.charAt(i),magChars.get(ransomNote.charAt(i)) -1);
            }
            else return false;
        }
        return true;
    }
}

/**
Alternate Solution
class Solution {
    public List<List<String>> groupAnagrams(String[] strs) {
        //Dont need to initalize return list can initalize arraylist at return time with ArrayList(map.values)
        ArrayList<ArrayList<String>> retList = new ArrayList<ArrayList<String>>();


        HashMap<String, List<String>> seenAna = new HashMap<String, List<String>>();
        //for(string s: strs)
        for (int i = 0; i < strs.length; i++) {
            String sorted = Arrays.sort(strs[i]);
            for (int j = 0; j < strs[i].length; j++) {
                new ArrayList<> curAna = seenAna.getOrDefault(sorted, []);
                seenAna.put(sorted, curAna);
            }
        }
        return new ArrayList<>(seenAna.values());
    }
}

**/
