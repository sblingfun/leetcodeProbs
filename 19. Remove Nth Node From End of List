class Solution {
    public ListNode removeNthFromEnd(ListNode head, int n) {
        //more optimal single pass double pointer
        //move faster pointer n spots ahead of the start then move both pointers

        ListNode fastPtr = head;
        ListNode slowPtr = head;
        while (n > 0) {
            fastPtr = fastPtr.next;
            n--;
        }
        //check if removing first node
        if (fastPtr == null) return head.next;
        while (fastPtr.next != null) {
            fastPtr = fastPtr.next;
            slowPtr = slowPtr.next;
        }
        slowPtr.next = slowPtr.next.next;

        return head;
    }
}

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */

class Solution {
    public ListNode removeNthFromEnd(ListNode head, int n) {
        //Less optimal double pass 1 pointer solution
        ListNode ptr = head;
        int count = 0;
        while (ptr != null) {
            count++;
            ptr = ptr.next;
        }
        if (count <= 1) return null;
        System.out.println("c= " + count);
        if (count == n) return head.next;
        count = count - n;
        ptr = head;
        while (count - 1 != 0) {
            ptr = ptr.next;
            count--;
        }
        ptr.next = ptr.next.next;
        return head;
    }
}

