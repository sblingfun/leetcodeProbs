class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int n1 = nums1.length, n2 = nums2.length;
        //check that nums1 < nums2
        if (n1 > n2) {
            return findMedianSortedArrays(nums2,nums1);
        }

        int left = 0;
        int right = n1;
        int total = n1 + n2;
        int partition = (n1 + n2 + 1) / 2;

        while (left <= right) {
            //calculate midpoints
            int mid1 = (left + right) / 2;
            int mid2 = partition - mid1;
            //calculate edge values
            int l1 = (mid1 > 0) ? nums1[mid1 - 1] : Integer.MIN_VALUE;
            int l2 = (mid2 > 0) ? nums2[mid2 - 1] : Integer.MIN_VALUE;
            int r1 = (mid1 < n1) ? nums1[mid1] : Integer.MAX_VALUE;
            int r2 = (mid2 < n2) ? nums2[mid2] : Integer.MAX_VALUE;

            //conduct comparisons
            if (l1 <= r2 && l2 <= r1) {
                if ( (total) % 2 == 1) {
                    return Math.max(l1, l2);
                }
                else {
                    return (Math.max(l1, l2) + Math.min(r1, r2)) / 2.0;
                }
            }
            else if (l1 > r2) {
                right = mid1 - 1;
            }
            else left = mid1 + 1;
        }
        return 0.0;

    }
}
